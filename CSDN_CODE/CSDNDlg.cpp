// CSDNDlg.cpp : implementation file
//

#include "stdafx.h"
#include "CSDN.h"
#include "CSDNDlg.h"

#include <ATLBASE.H>

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CAboutDlg dialog used for App About

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// Dialog Data
	//{{AFX_DATA(CAboutDlg)
	enum { IDD = IDD_ABOUTBOX };
	//}}AFX_DATA

	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CAboutDlg)
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
	//}}AFX_VIRTUAL

// Implementation
protected:
	//{{AFX_MSG(CAboutDlg)
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
	//{{AFX_DATA_INIT(CAboutDlg)
	//}}AFX_DATA_INIT
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAboutDlg)
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
	//{{AFX_MSG_MAP(CAboutDlg)
		// No message handlers
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CCSDNDlg dialog

CCSDNDlg::CCSDNDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CCSDNDlg::IDD, pParent), m_Assist()
{
	//{{AFX_DATA_INIT(CCSDNDlg)
	//}}AFX_DATA_INIT
	// Note that LoadIcon does not require a subsequent DestroyIcon in Win32
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);

    m_pHttpReq = NULL;

    m_Thread = NULL;
    m_bIsExitThread = FALSE;
    m_strUser = TEXT("");

    m_bIsDebug = TRUE;

    m_nTime = 0;
}

void CCSDNDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CCSDNDlg)
	DDX_Control(pDX, IDC_EDIT_HTML, m_HtmlCtl);
	DDX_Control(pDX, IDC_STATIC_INFO, m_InfoCtl);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CCSDNDlg, CDialog)
	//{{AFX_MSG_MAP(CCSDNDlg)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BTN_REG, OnBtnReg)
	ON_BN_CLICKED(IDC_BTN_SAVE, OnBtnSave)
	ON_BN_CLICKED(IDC_BTN_LOGIN, OnBtnLogin)
	ON_BN_CLICKED(IDC_BTN_SET, OnBtnSet)
	ON_BN_CLICKED(IDC_BTN_TEST, OnBtnTest)
	ON_BN_CLICKED(IDC_BTN_GET_CODE, OnBtnGetCode)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CCSDNDlg message handlers

BOOL CCSDNDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Add "About..." menu item to system menu.

	// IDM_ABOUTBOX must be in the system command range.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		CString strAboutMenu;
		strAboutMenu.LoadString(IDS_ABOUTBOX);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon
	
	// TODO: Add extra initialization here
	
    CoInitialize(NULL); //COM组件的初始化

    HRESULT hr = m_pHttpReq.CreateInstance(__uuidof(WinHttpRequest));
	if (FAILED(hr)) 
    {
        AfxMessageBox(TEXT("导入Com失败，请联系管理员!"));
        exit(0);
    }

    //设置HTTPS忽略
    m_Assist.IgnoreHTTPS(m_pHttpReq);
    
    

    return TRUE;  // return TRUE  unless you set the focus to a control
}

void CCSDNDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CCSDNDlg::OnPaint() 
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

// The system calls this to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CCSDNDlg::OnQueryDragIcon()
{
	return (HCURSOR) m_hIcon;
}

void CCSDNDlg::OnOK() 
{
	// TODO: Add extra validation here
	
	//CDialog::OnOK();
}

#define WEB_GET                 TEXT("GET")
#define WEB_POST                TEXT("POST")    

#define WEB_UA                  TEXT("User-Agent")
#define WEB_UA_INFO             TEXT("Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36")

#define WEB_ENCODE              TEXT("Accept-Encoding")
#define WEB_ENCODE_INFO         TEXT("gzip, deflate")

#define WEB_LANGUAGE            TEXT("Accept-Language")
#define WEB_LANGUAGE_INFO       TEXT("zh-CN,zh;q=0.8")

#define WEB_CACHE_CONTROL       TEXT("Cache-Control")
#define WEB_CACHE_CONTROL_INFO  TEXT("max-age=0")

#define WEB_CACHE_PRAGMA        TEXT("Pragma")
#define WEB_NO_CACHE            TEXT("no-cache")

#define WEB_ACCEPT              TEXT("Accept")
#define WEB_ACCEPT_INFO         TEXT("text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8")

#define WEB_UPGRADE             TEXT("Upgrade-Insecure-Requests")
#define WEB_UPGRADE_INFO        TEXT("1")


#define WEB_CONNECTION          TEXT("Connection")
#define WEB_CONNECTION_INFO     TEXT("keep-alive")
#define WEB_HOST                TEXT("Host")
#define WEB_REFERER             TEXT("Referer")
#define WEB_COOKIE              TEXT("Cookie")

//邮箱后缀
#define WEB_MAIL                TEXT("@spambog.com")


BOOL CCSDNDlg::ProxyHost()
{
    if(m_bIsDebug)
    {
        m_Assist.SetProxy(m_pHttpReq);
    }
    return TRUE;
}

void CCSDNDlg::OnBtnReg() 
{
/*
"Cache-Control: max-age=0\
Connection: keep-alive\
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,* / *;q=0.8\
Accept-Language: zh-CN,zh;q=0.8\
Host: passport.csdn.net\
Referer: http://passport.csdn.net/account/mobileregister?action=mobileRegister\
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36\
Connection: Keep-Alive"*/

    try
    {
        //GetCsdn注册连接得到COOKIE
        m_pHttpReq->Open(WEB_GET, TEXT("http://passport.csdn.net/account/register?action=registerView&service=http://www.csdn.net"));
        
        //设置本地代理
        ProxyHost();
        
        m_pHttpReq->SetRequestHeader(WEB_CACHE_CONTROL, WEB_CACHE_CONTROL_INFO);
        m_pHttpReq->SetRequestHeader(WEB_CONNECTION, WEB_CONNECTION_INFO);
        m_pHttpReq->SetRequestHeader(WEB_ACCEPT, WEB_ACCEPT_INFO);
        m_pHttpReq->SetRequestHeader(WEB_LANGUAGE, WEB_LANGUAGE_INFO);
        m_pHttpReq->SetRequestHeader(WEB_HOST, TEXT("passport.csdn.net"));
        m_pHttpReq->SetRequestHeader(WEB_REFERER, TEXT("http://passport.csdn.net/account/mobileregister?action=mobileRegister"));
        m_pHttpReq->SetRequestHeader(WEB_UA, WEB_UA_INFO);
        
        //请求网页，得到Cookie
        m_pHttpReq->Send();
        

        m_nTime = m_Assist.GetTimer();

        //拼接验证码字符串
        CString strVerify = TEXT("");
        strVerify.Format(TEXT("http://passport.csdn.net/ajax/verifyhandler.ashx?rand=%d"), m_nTime);

        m_pHttpReq->Open(WEB_GET, (_bstr_t)strVerify);

        m_pHttpReq->SetRequestHeader(WEB_CACHE_CONTROL, WEB_CACHE_CONTROL_INFO);
        m_pHttpReq->SetRequestHeader(WEB_CONNECTION, WEB_CONNECTION_INFO);
        m_pHttpReq->SetRequestHeader(WEB_ACCEPT, TEXT("image/png, image/svg+xml, image/*;q=0.8, */*;q=0.5"));
        m_pHttpReq->SetRequestHeader(WEB_LANGUAGE, WEB_LANGUAGE_INFO);
        m_pHttpReq->SetRequestHeader(WEB_HOST, TEXT("passport.csdn.net"));
        m_pHttpReq->SetRequestHeader(WEB_REFERER, TEXT("http://passport.csdn.net/account/register?action=registerView&service=http://www.csdn.net/"));
        m_pHttpReq->SetRequestHeader(WEB_UA, WEB_UA_INFO);
        m_pHttpReq->SetRequestHeader(WEB_ENCODE, WEB_ENCODE_INFO);
        
        //访问验证码
        m_pHttpReq->Send();
        
        //设置验证码信息
        m_CodeDlg.SetPicData(m_pHttpReq);
        m_CodeDlg.DoModal();
    }
    catch (_com_error &e)
    {
        try
        {
            //打印错误信息
            AfxMessageBox((LPTSTR)e.Description());
        }
        catch (...){}
    } 
    

}

//用户名在10个的位置随机
#define USER_MAX_LEN 12
BOOL CCSDNDlg::RandUser()
{
    //初始化用户名
    m_strUser = TEXT("");
    
    for(int i = 0; i < USER_MAX_LEN; i++)
    {
        m_strUser += m_Assist.GetRand();
    }

    return TRUE;
}


void CCSDNDlg::OnBtnSave() 
{
	// TODO: Add your control notification handler code here
	
}

void CCSDNDlg::OnBtnLogin() 
{
	// TODO: Add your control notification handler code here
	
}

void CCSDNDlg::OnBtnSet() 
{
	// TODO: Add your control notification handler code here
	
}

BOOL CCSDNDlg::DestroyWindow() 
{
	// TODO: Add your specialized code here and/or call the base class
    if(m_pHttpReq != NULL)
    {
        try
        {
            m_pHttpReq.Release();
        }
        catch(...)
        {}
        
	}

    CoUninitialize();   //卸载COM组件
	return CDialog::DestroyWindow();
}

void CCSDNDlg::OnBtnTest() 
{
	// TODO: Add your control notification handler code here
    
    unsigned unsigned char Pic[1408] = {
        0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x02, 0x00, 0x00, 0x01, 
            0x00, 0x01, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 
            0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12, 
            0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20, 
            0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 
            0x39, 0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xDB, 0x00, 0x43, 0x01, 0x09, 0x09, 
            0x09, 0x0C, 0x0B, 0x0C, 0x18, 0x0D, 0x0D, 0x18, 0x32, 0x21, 0x1C, 0x21, 0x32, 0x32, 0x32, 0x32, 
            0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
            0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
            0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0xFF, 0xC0, 
            0x00, 0x11, 0x08, 0x00, 0x14, 0x00, 0x46, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 
            0x01, 0xFF, 0xC4, 0x00, 0x1F, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 
            0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 
            0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7D, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 
            0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08, 0x23, 
            0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16, 0x17, 
            0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 
            0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 
            0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 
            0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 
            0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 
            0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 
            0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF1, 
            0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xC4, 0x00, 0x1F, 0x01, 0x00, 0x03, 
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
            0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x11, 0x00, 
            0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01, 0x02, 0x77, 0x00, 
            0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 
            0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xA1, 0xB1, 0xC1, 0x09, 0x23, 0x33, 0x52, 0xF0, 0x15, 
            0x62, 0x72, 0xD1, 0x0A, 0x16, 0x24, 0x34, 0xE1, 0x25, 0xF1, 0x17, 0x18, 0x19, 0x1A, 0x26, 0x27, 
            0x28, 0x29, 0x2A, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 
            0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 
            0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 
            0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 
            0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 
            0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE2, 
            0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 
            0xFA, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0xF4, 
            0x4D, 0x67, 0x58, 0xBB, 0xD2, 0xF4, 0x5B, 0xCB, 0xCB, 0x78, 0xFC, 0xD6, 0xB6, 0xB5, 0x92, 0x45, 
            0x12, 0x8F, 0x94, 0x95, 0x52, 0x54, 0x9C, 0x1C, 0x9E, 0x83, 0x38, 0xE3, 0x86, 0xC7, 0xA8, 0xC3, 
            0xF0, 0x77, 0x8B, 0x4E, 0xBD, 0xA3, 0xDD, 0x5D, 0x6A, 0xFB, 0x34, 0xEB, 0xA8, 0xCF, 0xEF, 0xB6, 
            0xC8, 0xE8, 0x8A, 0xAC, 0xA1, 0xD2, 0x52, 0x18, 0xFC, 0xAA, 0xCA, 0x78, 0xC9, 0xC6, 0x10, 0x9C, 
            0xE0, 0xF1, 0xA9, 0xE3, 0x18, 0x97, 0xFE, 0x11, 0xAD, 0x73, 0x2C, 0xB1, 0xB2, 0xD9, 0x4E, 0xC8, 
            0x49, 0x39, 0x2A, 0x63, 0x62, 0x47, 0xD4, 0x90, 0x78, 0x27, 0xB9, 0xE2, 0xBC, 0xDE, 0xEB, 0x46, 
            0xD5, 0xEC, 0xF4, 0x9B, 0x36, 0xD2, 0xA0, 0x79, 0x20, 0xD7, 0xB4, 0x6B, 0x5B, 0x79, 0xA5, 0x8E, 
            0x23, 0x22, 0xC3, 0x28, 0xF2, 0xC6, 0xE9, 0x0E, 0x0F, 0x96, 0x3C, 0xB6, 0x2B, 0x91, 0xD7, 0x93, 
            0x8C, 0xF3, 0x5C, 0xE9, 0x26, 0x8E, 0x24, 0x93, 0x46, 0xAF, 0x87, 0x7E, 0x20, 0x5F, 0x6A, 0xB2, 
            0xEA, 0x11, 0x36, 0x98, 0x96, 0xD2, 0x80, 0x9F, 0x63, 0x82, 0x1F, 0x30, 0x31, 0x0F, 0xB9, 0x83, 
            0x3B, 0x16, 0xE7, 0x03, 0x07, 0x38, 0x19, 0xCF, 0x40, 0x0E, 0x47, 0x54, 0x75, 0x5D, 0x5A, 0xD1, 
            0xED, 0xA1, 0xD5, 0xA6, 0x41, 0x0D, 0xC8, 0x1E, 0x45, 0xC5, 0xAE, 0x48, 0x0D, 0xDD, 0x1B, 0xBE, 
            0x7F, 0x4C, 0xFE, 0x25, 0x78, 0x9B, 0x3B, 0x7B, 0x7D, 0x3B, 0xC7, 0x3A, 0xD4, 0xF6, 0xB0, 0x3F, 
            0xD8, 0xEC, 0x96, 0xD5, 0x3C, 0x98, 0xDB, 0x71, 0x48, 0xCC, 0x04, 0x67, 0x27, 0x93, 0xB7, 0x03, 
            0xEB, 0xEB, 0xDE, 0xBA, 0x2B, 0x8D, 0x41, 0x75, 0xCB, 0xAB, 0x58, 0x6D, 0x72, 0xE2, 0x29, 0xFE, 
            0xD3, 0x34, 0xED, 0x90, 0xA3, 0xFD, 0x9C, 0x63, 0xA9, 0xC1, 0xFD, 0x3D, 0x38, 0xD5, 0x45, 0x35, 
            0xB1, 0x9C, 0xDF, 0xBC, 0x5B, 0x8B, 0xC6, 0x13, 0x69, 0xD6, 0x9A, 0x84, 0x3A, 0xC5, 0xC2, 0x8D, 
            0x42, 0xD5, 0x88, 0xB5, 0x82, 0x30, 0x15, 0xAF, 0x50, 0xFF, 0x00, 0xAA, 0x68, 0xC1, 0x0C, 0x4E, 
            0xE3, 0xF2, 0x90, 0x0B, 0x15, 0x20, 0xEE, 0xEF, 0x8B, 0x77, 0x7A, 0xDE, 0xAB, 0xA4, 0x78, 0x62, 
            0x4B, 0xEB, 0x94, 0x80, 0x6A, 0x48, 0xA8, 0xD3, 0x44, 0xA3, 0xF7, 0x4A, 0xEC, 0xC0, 0x14, 0xC0, 
            0x63, 0xD3, 0x27, 0x90, 0xC0, 0x92, 0x33, 0x8E, 0xB5, 0xC8, 0xCF, 0x6B, 0x73, 0xAF, 0xEA, 0x12, 
            0xF8, 0x8A, 0xCD, 0x21, 0x92, 0x1D, 0x11, 0xB1, 0x05, 0xBF, 0x90, 0xAE, 0xD7, 0xEA, 0x8D, 0xFB, 
            0xC2, 0xB2, 0x00, 0x78, 0xE7, 0x08, 0x7E, 0x6C, 0x11, 0x91, 0xB4, 0xD6, 0xD6, 0xBF, 0x7D, 0x06, 
            0xA5, 0xE0, 0x89, 0xAF, 0xED, 0xA5, 0xCC, 0x37, 0x50, 0xC1, 0x2A, 0xE1, 0xBB, 0xEE, 0x00, 0xA1, 
            0x03, 0x8C, 0x82, 0x0F, 0xB0, 0xDB, 0x8A, 0xC5, 0xA4, 0x3A, 0x9A, 0x41, 0xB4, 0x74, 0x56, 0xDE, 
            0x22, 0xB3, 0xD6, 0x3C, 0xE8, 0x2C, 0x2F, 0x59, 0xEE, 0xED, 0xD8, 0xB6, 0xD8, 0xD4, 0x90, 0xC3, 
            0x77, 0x6E, 0x39, 0x1D, 0x06, 0x7A, 0x72, 0x33, 0x49, 0x79, 0xE2, 0x1B, 0x5D, 0x2C, 0x88, 0x2F, 
            0xB5, 0x18, 0xA0, 0x91, 0x20, 0x49, 0xD0, 0xBA, 0x3B, 0x19, 0x14, 0x9D, 0xBD, 0xBA, 0xF3, 0xDB, 
            0x19, 0xEA, 0x7B, 0x66, 0xB9, 0x73, 0x71, 0x6F, 0xA8, 0x78, 0xAB, 0x4F, 0x9B, 0x4F, 0xB4, 0x21, 
            0x6C, 0x63, 0x6F, 0xB4, 0xA9, 0x83, 0xCB, 0x10, 0xFC, 0xBB, 0x44, 0x6C, 0x30, 0x39, 0x07, 0x23, 
            0x03, 0x8E, 0x4E, 0x3B, 0xE2, 0x4B, 0xFD, 0x42, 0xCA, 0xCB, 0xC6, 0x4B, 0x73, 0x7A, 0x92, 0x47, 
            0x1A, 0xE9, 0xD9, 0x8E, 0x45, 0x42, 0x7C, 0x97, 0x2E, 0x48, 0x6E, 0x33, 0x80, 0x72, 0x54, 0x63, 
            0xFB, 0xC3, 0xD4, 0x9A, 0x4D, 0x68, 0x14, 0xBD, 0xFB, 0xDC, 0xEC, 0xA2, 0xD4, 0xAD, 0x2F, 0x62, 
            0x8E, 0xEA, 0x29, 0x5A, 0x58, 0x26, 0x40, 0xD1, 0xBC, 0x73, 0x04, 0x03, 0xD5, 0x4F, 0xCC, 0x39, 
            0x1F, 0x9F, 0x38, 0xED, 0x45, 0x73, 0x9E, 0x0D, 0x8A, 0x17, 0xB7, 0xBD, 0x79, 0xEC, 0xE4, 0x8A, 
            0x1B, 0xAB, 0x97, 0xB9, 0x86, 0x20, 0x85, 0x42, 0xC6, 0x71, 0xB7, 0x0A, 0xBD, 0xB0, 0x4E, 0x3D, 
            0xB1, 0x8E, 0xB4, 0x52, 0xD0, 0xA9, 0x24, 0x9D, 0x8E, 0xC5, 0xE3, 0x43, 0x7C, 0x84, 0xA8, 0x25, 
            0xA1, 0x65, 0x6C, 0xF7, 0x19, 0x5F, 0xF1, 0x35, 0x87, 0xB9, 0xD7, 0x50, 0x95, 0x56, 0x57, 0x51, 
            0x1B, 0x3B, 0x2F, 0xCD, 0x9E, 0x81, 0x88, 0xEB, 0xF8, 0xFE, 0x66, 0x8A, 0x29, 0xC0, 0x48, 0xB5, 
            0x78, 0x89, 0x15, 0x84, 0x17, 0x08, 0xBB, 0x5A, 0x40, 0x81, 0xD4, 0x13, 0x82, 0x36, 0xFF, 0x00, 
            0x80, 0xC7, 0xD0, 0x9A, 0xA1, 0x6C, 0xEC, 0x66, 0x39, 0x3B, 0x86, 0xC2, 0x48, 0x6E, 0x72, 0x14, 
            0x64, 0x03, 0xED, 0xF2, 0x8A, 0x28, 0xAA, 0x8E, 0xC0, 0xB6, 0x34, 0x02, 0xA5, 0xC5, 0x90, 0x96, 
            0x44, 0x52, 0xED, 0x6E, 0xE4, 0xB6, 0x39, 0x25, 0x48, 0x00, 0xE7, 0xD7, 0xF9, 0xD4, 0x16, 0x88, 
            0xB7, 0xAA, 0xB0, 0xC8, 0x36, 0xA8, 0x75, 0x00, 0xA7, 0x1C, 0x6D, 0x6F, 0xEA, 0x33, 0xF8, 0x9F, 
            0x5A, 0x28, 0xA4, 0x80, 0x9A, 0xD5, 0x4D, 0xCD, 0x89, 0x95, 0xD8, 0x89, 0x3C, 0xDF, 0x2C, 0xB2, 
            0xE0, 0x65, 0x58, 0x8C, 0x83, 0xFF, 0x00, 0x7D, 0x13, 0x58, 0x76, 0x1F, 0xBB, 0xF8, 0x87, 0x1C, 
            0x5F, 0x79, 0x1F, 0x4A, 0x00, 0x86, 0xE7, 0x82, 0xDB, 0x88, 0xFC, 0xE8, 0xA2, 0x89, 0x6C, 0xCA, 
            0x8F, 0x53, 0x5E, 0xD2, 0xDA, 0x3B, 0x89, 0xBE, 0xCC, 0xF9, 0x0A, 0x23, 0x59, 0x37, 0x29, 0xC1, 
            0x27, 0x00, 0xE0, 0xF6, 0x3F, 0x78, 0xF6, 0xCF, 0xBD, 0x14, 0x51, 0x4E, 0xE4, 0x9F, 0xFF, 0xD9
};

    m_CodeDlg.SetPicData("c:\\TestCode.jpg");
    //m_CodeDlg.SetPicData(Pic, sizeof(Pic));
    m_CodeDlg.DoModal();

    //RandUser();
    //m_strUser += WEB_MAIL;
    //m_HtmlCtl.SetWindowText(m_strUser);
    
    //TestBaidu();
// 	for(int i = 0; i < 10000; i++)
// 	{
//         RandUser();
//         OutputDebugString(m_strUser);
// 	}
    
}
void CCSDNDlg::TestBaidu()
{

    try
    {
        //检测对象是否实例
        if(m_pHttpReq == NULL)
        {
            AfxMessageBox(TEXT("连接对象未初始化！"));
            return;
        }
        
        //对象打开网址
        m_pHttpReq->Open(WEB_GET, TEXT("http://passport.csdn.net/account/register?action=registerView&service=http://www.csdn.net"));
        
        //设置超时
        m_pHttpReq->SetTimeouts(15000, 15000, 15000, 15000);

        //设置走本地代理
        HRESULT hr = m_Assist.SetProxy(m_pHttpReq);
        if (FAILED(hr))
        {
            AfxMessageBox(TEXT("设置代理失败"));
            return;
        }
CString strSTR = "\
GET http://passport.csdn.net/account/register?action=registerView&service=http://www.csdn.net HTTP/1.1\
Host: passport.csdn.net\
Connection: keep-alive\
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\
Upgrade-Insecure-Requests: 1\
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36\
Referer: http://passport.csdn.net/account/mobileregister?action=mobileRegister\
Accept-Encoding: gzip, deflate, sdch\
Accept-Language: zh-CN,zh;q=0.8";
        //设置HTTP头
        m_pHttpReq->SetRequestHeader(WEB_HOST, TEXT("passport.csdn.net"));
        m_pHttpReq->SetRequestHeader(WEB_CONNECTION, WEB_CONNECTION_INFO);
        m_pHttpReq->SetRequestHeader(WEB_CACHE_CONTROL, TEXT("max-age=0"));
        m_pHttpReq->SetRequestHeader(WEB_ACCEPT, WEB_ACCEPT_INFO);
        m_pHttpReq->SetRequestHeader(WEB_LANGUAGE, WEB_LANGUAGE_INFO);
        m_pHttpReq->SetRequestHeader(WEB_REFERER, TEXT("http://passport.csdn.net/account/mobileregister?action=mobileRegister"));
        m_pHttpReq->SetRequestHeader(WEB_UA, WEB_UA_INFO);
        

        //Get方法 发送HTTP信息
        hr = m_pHttpReq->Send();
        if (FAILED(hr)) 
            return;

        //获得回执信息的Body
        _bstr_t bstrRep = m_pHttpReq->ResponseText;

        //获取回执信息所有的头信息
        _bstr_t bstrAllHeader = m_pHttpReq->GetAllResponseHeaders();

        //转换数据为CString
        CString strHeader = (LPTSTR)bstrAllHeader;

        //通过Http头获得COOKIES
        m_Assist.GetCookieString((LPCTSTR)bstrAllHeader, m_Assist.m_CookieMap).c_str();
        
        tstring strTmp = TEXT("");
        m_Assist.MapToCookie(strTmp, m_Assist.m_CookieMap);
        CString strCookie = strTmp.c_str();
        CString strRep = (LPTSTR)bstrRep;

        //AfxMessageBox(strHeader);
        //AfxMessageBox(strCookie);
        //AfxMessageBox(strRep);
        
        m_pHttpReq->Open(WEB_GET, TEXT("http://passport.csdn.net/account/register?action=registerView&service=http://www.csdn.net"));
        m_pHttpReq->Send();

        m_pHttpReq->Open(WEB_GET, TEXT("http://passport.csdn.net/account/register?action=registerView&service=http://www.csdn.net"));
        m_pHttpReq->SetRequestHeader(WEB_COOKIE, (_bstr_t)strCookie);

        m_pHttpReq->Send();

    }
    catch (_com_error &e)
    {
        try
        {
            //打印错误信息
            AfxMessageBox((LPTSTR)e.Description());
        }
        catch (...){}
    } 
}

void CCSDNDlg::OnBtnGetCode() 
{
    
	
}
